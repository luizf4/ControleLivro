package br.metodista.ads.telas;

import br.metodista.ads.modelos.Emprestimo;
import br.metodista.ads.modelos.Livro;
import br.metodista.ads.modelos.Usuario;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luiz Fernando de Souza ADS - EAD Sorocaba Matricula: 225272
 */
public class TelaEmprestimo extends javax.swing.JInternalFrame {

    /**
     * Creates new form TelaEmprestimo
     */
    private List<Usuario> usuarios;
    private List<Livro> livros;
    private List<Emprestimo> emprestimos;

    public TelaEmprestimo(List<Usuario> usuarios, List<Livro> livros,
            List<Emprestimo> emprestimos) {
        initComponents();

        this.usuarios = usuarios;
        this.livros = livros;
        this.emprestimos = emprestimos;
        initComponents();
        carregarUsuarios();
        carregarLivros();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelEnmprestimo = new javax.swing.JPanel();
        jLabelUsuario = new javax.swing.JLabel();
        jComboBoxUsuarios = new javax.swing.JComboBox<>();
        jPanelDadosEmprestimo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmprestimo = new javax.swing.JTable();
        jButtonEmprestar = new javax.swing.JButton();
        jButtonDevolver = new javax.swing.JButton();
        jButtonAtualizar = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Emprestimo de Livros");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanelEnmprestimo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Emprestimo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N
        jPanelEnmprestimo.setLayout(null);

        jLabelUsuario.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabelUsuario.setText("Usuário:");
        jPanelEnmprestimo.add(jLabelUsuario);
        jLabelUsuario.setBounds(28, 36, 58, 17);

        jComboBoxUsuarios.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBoxUsuarios.setToolTipText("Usuários para Seleção");
        jPanelEnmprestimo.add(jComboBoxUsuarios);
        jComboBoxUsuarios.setBounds(40, 59, 486, 34);

        jPanelDadosEmprestimo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18))); // NOI18N
        jPanelDadosEmprestimo.setLayout(null);

        jTableEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Título", "Autor", "ISBN", "Páginas", "Edição", "Emprestado?"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEmprestimo.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTableEmprestimo);
        if (jTableEmprestimo.getColumnModel().getColumnCount() > 0) {
            jTableEmprestimo.getColumnModel().getColumn(0).setResizable(false);
            jTableEmprestimo.getColumnModel().getColumn(0).setPreferredWidth(300);
            jTableEmprestimo.getColumnModel().getColumn(1).setResizable(false);
            jTableEmprestimo.getColumnModel().getColumn(1).setPreferredWidth(300);
            jTableEmprestimo.getColumnModel().getColumn(2).setResizable(false);
            jTableEmprestimo.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTableEmprestimo.getColumnModel().getColumn(3).setResizable(false);
            jTableEmprestimo.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTableEmprestimo.getColumnModel().getColumn(4).setResizable(false);
            jTableEmprestimo.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTableEmprestimo.getColumnModel().getColumn(5).setResizable(false);
            jTableEmprestimo.getColumnModel().getColumn(5).setPreferredWidth(85);
        }

        jPanelDadosEmprestimo.add(jScrollPane1);
        jScrollPane1.setBounds(10, 30, 640, 320);

        jButtonEmprestar.setMnemonic('E');
        jButtonEmprestar.setText("Emprestar");
        jButtonEmprestar.setToolTipText("Alt + E");
        jButtonEmprestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmprestarActionPerformed(evt);
            }
        });

        jButtonDevolver.setMnemonic('D');
        jButtonDevolver.setText("Devolver");
        jButtonDevolver.setToolTipText("Alt + D");
        jButtonDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDevolverActionPerformed(evt);
            }
        });

        jButtonAtualizar.setMnemonic('A');
        jButtonAtualizar.setText("Atualizar");
        jButtonAtualizar.setToolTipText("Alt + A");
        jButtonAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtualizarActionPerformed(evt);
            }
        });

        jButtonFechar.setMnemonic('F');
        jButtonFechar.setText("Fechar");
        jButtonFechar.setToolTipText("Alt + F");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelDadosEmprestimo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelEnmprestimo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jButtonEmprestar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButtonFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelEnmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelDadosEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonEmprestar, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(jButtonFechar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDevolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEmprestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmprestarActionPerformed
        int[] linhasSelecionadas = jTableEmprestimo.getSelectedRows();

        if (jTableEmprestimo.getSelectedRow() == -1) {

            JOptionPane.showMessageDialog(this, "Selecione um Livro para Emprestimo!",
                    "Emprestimo", JOptionPane.OK_OPTION);

        } else //Verifica se os livros estão disponíveis.
        {
            if (todosLivrosDisponiveis(livros, linhasSelecionadas)) {
                //Para cada livro selecionado faz um emprestimo
                for (int cont = 0; cont < linhasSelecionadas.length; cont++) {
                    int livroSelecionado = linhasSelecionadas[cont];
                    Livro livro = livros.get(livroSelecionado);
                    //Monta um emprestimo para o usuário e livro.
                    Emprestimo e = new Emprestimo();
                    e.setUsuario(getUsuarioSelecionado());
                    e.setDataEmprestimo(new Date());
                    e.setLivro(livro);
                    //Adiciona o emprestimo na lista.
                    emprestimos.add(e);
                    //Marca que o livro foi emprestado.
                    livro.setEmprestimo(e);
                }
                carregarLivros();

                JOptionPane.showMessageDialog(this, "Livro Emprestado para "
                        + getUsuarioSelecionado().getNome() + " !!!",
                        "Emprestimo", JOptionPane.OK_OPTION);
            } else {
                JOptionPane.showMessageDialog(this, "Livro Indisponível para Emprestimo!", "Emprestimo",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonEmprestarActionPerformed

    private void jButtonDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDevolverActionPerformed

        int[] linhasSelecionadas = jTableEmprestimo.getSelectedRows();

        if (jTableEmprestimo.getSelectedRow() == -1) {
            
            JOptionPane.showMessageDialog(this, "Selecione um Livro para Devolução!",
                    "Devolução", JOptionPane.OK_OPTION);

        } else {

            for (int cont = 0; cont < linhasSelecionadas.length; cont++) {
                int livroSelecionado = linhasSelecionadas[cont];
                Livro livro = livros.get(livroSelecionado);

                if (livro.getEmprestimo() != null) {
                    Emprestimo emprestimo = livro.getEmprestimo();
                    emprestimo.setDataDevolucao(new Date());
                    livro.setEmprestimo(null);
                }
            }
            carregarLivros();

            JOptionPane.showMessageDialog(this, "Livro(s) Devolvido(s)!!!",
                    "Empréstimo", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_jButtonDevolverActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        Principal.setVerificaTelaEmprestimo(true);

    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed

        Principal.setVerificaTelaEmprestimo(false);

    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing

        dispose();

    }//GEN-LAST:event_formInternalFrameClosing

    private void jButtonAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtualizarActionPerformed

        carregarUsuarios();
        carregarLivros();

    }//GEN-LAST:event_jButtonAtualizarActionPerformed

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed

        dispose();

    }//GEN-LAST:event_jButtonFecharActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAtualizar;
    private javax.swing.JButton jButtonDevolver;
    private javax.swing.JButton jButtonEmprestar;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JComboBox<String> jComboBoxUsuarios;
    private javax.swing.JLabel jLabelUsuario;
    private javax.swing.JPanel jPanelDadosEmprestimo;
    private javax.swing.JPanel jPanelEnmprestimo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEmprestimo;
    // End of variables declaration//GEN-END:variables

    private void carregarUsuarios() {

        String[] logins = new String[usuarios.size()];

        for (int cont = 0; cont < usuarios.size(); cont++) {
            logins[cont] = usuarios.get(cont).getLogin();
        }
        //Cria um combo box com o vetor de logins.
        jComboBoxUsuarios.setModel(new javax.swing.DefaultComboBoxModel(logins));
    }

    private void carregarLivros() {

        //Remove todos os livros da tabela.
        for (int cont = jTableEmprestimo.getRowCount() - 1; cont >= 0; cont--) {
            ((DefaultTableModel) jTableEmprestimo.getModel()).removeRow(cont);
        }
        //Adiciona todos os livros na tabela.
        for (Livro l : livros) {
            ((DefaultTableModel) jTableEmprestimo.getModel()).addRow(l.carregarGrid());
        }

    }

    private boolean todosLivrosDisponiveis(List<Livro> livros, int[] selecionados) {

        boolean disponivel = true;

        //Percorre todos os livros selecionados.
        for (int cont = 0; cont < selecionados.length; cont++) {
            int livroSelecionado = selecionados[cont];
            if (livros.get(livroSelecionado).getEmprestimo() != null) {
                //Se algum livro estiver emprestado, para de verificar e devolve false.
                disponivel = false;
                break;
            }
        }

        return disponivel;

    }

    private Usuario getUsuarioSelecionado() {
        //Obtem o usuário selecionado na lista.
        String login = (String) jComboBoxUsuarios.getSelectedItem();
        Usuario usuario = null;
        //Percorre todos os usuário para verificar se existe um usuário com o login informado

        for (Usuario u : usuarios) {
            if (u.getLogin().equals(login)) {
                usuario = u;
                //Se encontrar o usuário, para de procurar.
                break;
            }
        }
        return usuario;
    }

}
